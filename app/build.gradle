apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: 'VersionUtils.gradle'

ext.densityList = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
ext.abiList = ['armeabi', 'armeabi-v7a', 'x86']

def buildVersion = project.hasProperty("devBuild") ? 100 :
    new Date().format("yyMMddHHmm").toInteger()

android {
  compileSdkVersion 27
  defaultConfig {
    applicationId "io.github.asvid.flavorhell"
    minSdkVersion 16
    targetSdkVersion 27
    versionCode buildVersion
    //  versionCode 40120000
    versionName "4.0.12"
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    manifestPlaceholders = [appName: "@string/app_name"]
  }

  signingConfigs {
    config {}
  }

  buildTypes {
    release {
      buildConfigField "String", "FOO", '"release"'
      resValue "string", "string_val", "release string value"
      minifyEnabled true
      shrinkResources true
      multiDexEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.config
    }
    debug {
      buildConfigField "String", "FOO", '"debug"'
      buildConfigField "int", "FOO_INT", 10.toString()
      buildConfigField "double", "FOO_DOUBLE", '10.0D'
      buildConfigField "float", "FOO_FLOAT", '10.0F'
      buildConfigField "long", "FOO_LONG", '10L'
      resValue "string", "string_val", "debug string value"
      //            manifestPlaceholders = [appName: "App Name - Debug"]
      debuggable true
      multiDexEnabled true
      minifyEnabled false
      ext.enableCrashlytics = false // disable Crashlytics in debug, you have debug console for this
      ext.alwaysUpdateBuildId = false
      // disable updating build number for Crashlytics, decreases build time
    }
    alfa {
      initWith release
      manifestPlaceholders = [appName: "App Name - Alfa"]
      buildConfigField "String", "FOO", '"alfa"'
      applicationIdSuffix ".alfa"
      // add .alfa to AppId, so it doesn't override release or debug version
    }
  }
  flavorDimensions "stage", "other"
  productFlavors {
    dev {
      dimension "stage"
      minSdkVersion 21 // for using new Multidex, not legacy one - DEPRECATED
      versionNameSuffix "-dev" // e.g 1.0-dev
      applicationIdSuffix '.dev'
      // for keeping GooglePlay production version alongside with developed
      resConfigs("en", "xxhdpi") // limiting used resources boosts build time
    }

    prod {
      dimension "stage"
    }

    other {
      dimension "other"
    }

    other2 {
      dimension "other"
    }
  }
  variantFilter { variant ->
    // 'dev' flavor is only available for debug build
    if (!variant.buildType.name.equals('debug') && variant.getFlavors().get(0).name.equals("dev")) {
      variant.setIgnore(true)
    }
    // 'prod' flavor is only available for release build
    if (!(variant.buildType.name.equals('release') || variant.buildType.name.equals('alfa')) &&
        variant.getFlavors().get(0).name.equals("prod")) {
      variant.setIgnore(true)
    }
  }
  splits {
    abi {
      enable true

      // Include the three architectures that we support for snowdown
      reset()
      // use list of ABI to create APK variations
      include(*abiList)

      // Only enable universal build when building release
      def taskList = gradle.startParameter.taskNames.join(",")
      def isRelease = taskList.contains("assembleRelease")
      universalApk(isRelease)
    }

    density {
      enable true
      reset()
      // use density list to create variations
      include(*densityList)
      // Specifies a list of compatible screen size settings for the manifest.
      compatibleScreens 'small', 'normal', 'large', 'xlarge'
    }
  }
  if (project.hasProperty('devBuild')) {
    // disable generating multiple APK for dev builds
    splits.abi.enable = false
    splits.density.enable = false
    // disable PNG crunching for dev builds
    aaptOptions.cruncherEnabled = false
  }
  dexOptions {
    javaMaxHeapSize = "4gb" //    Not used anymore
    preDexLibraries = true //    speeds up incremental builds, can slow down clean build
  }
}

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    def abiFilter = output.getFilter(OutputFile.ABI)
    int abiVersionCode = (abiList.indexOf(abiFilter) + 1) * 10

    def densityFilter = output.getFilter(OutputFile.DENSITY)
    int densityVersionCode = (abiList.indexOf(densityList) + 1)

    output.versionCodeOverride =
        variant.mergedFlavor.versionCode + abiVersionCode + densityVersionCode
  }
}

// if there is dependency conflict, it can be resolved like below
configurations.all {
  resolutionStrategy {
    force 'com.android.support:support-v4:27.1.0'
  }
}

// Apply signing configurations, keys and other non-version-controlled things
if (file('../internal/santa-tracker.gradle').exists()) {
  apply from: '../internal/santa-tracker.gradle'
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:appcompat-v7:+'
  implementation 'com.android.support.constraint:constraint-layout:1.1.2'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
